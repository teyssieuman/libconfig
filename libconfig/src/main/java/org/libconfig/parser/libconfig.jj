options {  JDK_VERSION = "1.5";  static = false;  UNICODE_INPUT = true;}PARSER_BEGIN(ConfigParser)package org.libconfig.parser;import java.io.*;import java.util.List;import java.util.ArrayList;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.libconfig.*;public class ConfigParser {}PARSER_END(ConfigParser)SKIP : {  " " | "\t" | "\n" | "\r" | "\f" }/* Comments */MORE : {  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT  | "/*" : IN_MULTI_LINE_COMMENT}SPECIAL_TOKEN : {  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>}<IN_FORMAL_COMMENT>SPECIAL_TOKEN : {  <FORMAL_COMMENT: "*/" > : DEFAULT}<IN_MULTI_LINE_COMMENT>SPECIAL_TOKEN : {  <MULTI_LINE_COMMENT: "*/" > : DEFAULT}<IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>MORE : {  < ~[] >}/* Types tokens */TOKEN: {  < BOOLEAN_TOKEN: < TRUE_VALUE > | < FALSE_VALUE > >	  | < #TRUE_VALUE: (["T", "t","R", "r","U","u","E", "e"]){4}>	  | < #FALSE_VALUE: (["F", "f", "A", "a", "L", "l", "S", "s","E", "e"]){5}>  |   < INTEGER_TOKEN: <DECIMAL_LITERAL> >	  | < #DECIMAL_LITERAL: ((["-", "+"]) ? ["0"-"9"])+ >  |  <HEX_INTEGER: <HEX_LITERAL> > 	  | < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >  |  < FLOATING_POINT_TOKEN: <DECIMAL_FLOATING_POINT_TOKEN> >	  | < #DECIMAL_FLOATING_POINT_TOKEN:	      (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)? 	      | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)?	      | (["0"-"9"])+ <DECIMAL_EXPONENT> 	      | (["0"-"9"])+ (<DECIMAL_EXPONENT>)>	  |  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >  |  < STRING_TOKEN:  	"\""    (   (~["\"","\\","\n","\r"])      | ("\\"          ( ["n","t","b","r","f","\\","'","\""]          | ["0"-"7"] ( ["0"-"7"] )?          | ["0"-"3"] ["0"-"7"] ["0"-"7"]          )        )    )*    "\""  >  |  < NAME_TOKEN: < NAME_TOKEN_LITERAL > >	  | < #NAME_TOKEN_LITERAL: ( (< ONLY_LETTERS_AND_NUMBERS_AND_UNDERSCORE >)+ ("-")? (< ONLY_LETTERS_AND_NUMBERS_AND_UNDERSCORE >)? )+>	  |  < #ONLY_LETTERS_AND_NUMBERS_AND_UNDERSCORE: ["A"-"Z", "a"-"z", "_", "0"-"9"]>}/** Separators token */TOKEN : {  < LPAREN: "(" > | < RPAREN: ")" >  | < LBRACE: "{" > | < RBRACE: "}" >  | < LBRACKET: "[" > | < RBRACKET: "]" >  | < SEMICOLON: ";" >  | < COLON: ":" >  | < COMMA: "," >  | < EQUALS: "=" >}/** Parser */public Config buildConfiguration() : {  	Config config = new Config();} {  	settingList(config) <EOF>  	{ return config; }}private void settingList(Config config) : { } {  	[ setting(config) {} (setting(config) {})* ]} private void setting(Config config) : {  /*Setting setting = new Setting();*/ } {  <NAME_TOKEN> { /*setting.setName(token.image);*/ }  (<COLON> | <EQUALS>) /*value(setting)*/ (<SEMICOLON> | <COMMA> | {})  { /*config.addSetting(setting);*/ }}private void valueList(Setting setting) : {} {  	[ value(setting) (LOOKAHEAD(1) <COMMA> value(setting))* ]} 
private void value(Setting setting) : { } {   scalarValue(setting)   | arrayValue(setting)   | listValue(setting)   | groupValue(setting)}private void scalarValueList(Setting setting) : { } {  	[ scalarValue(setting) (LOOKAHEAD(1) <COMMA> scalarValue(setting))* ]}private void scalarValue(Setting setting) : { } {  	<BOOLEAN_TOKEN> {//  	  		Boolean parsedBoolValue = Boolean.parseBoolean(token.image);//  	  		BooleanValue booleanValue = new BooleanValue(parsedBoolValue);//  	  		setting.setValue(booleanValue);  	  	}  	| <INTEGER_TOKEN> {//  	  		Integer parsedIntValue = Integer.parseInt(token.image);//  	  		IntegerValue integerValue = new IntegerValue(parsedIntValue);//  	  		setting.setValue(integerValue);  	 	}  	| <HEX_INTEGER > {//  	  		String cuttedStringValue = token.image.substring(2, token.image.length());//  	  		Integer parsedHexIntValue = Integer.parseInt(cuttedStringValue, 16);//  	  		IntegerValue hexIntegerValue = new IntegerValue(parsedHexIntValue);//			setting.setValue(hexIntegerValue);		}  	| <FLOATING_POINT_TOKEN> {//  	  		Double parsedDoubleValue = Double.parseDouble(token.image);//  	  		DoubleValue doubleValue = new DoubleValue(parsedDoubleValue);//  	  		setting.setValue(doubleValue);  	  	}  	| <STRING_TOKEN> {//  	  		StringValue stringValue = new StringValue(token.image);//  	  		setting.setValue(stringValue);  	  	}}private void arrayValue(Setting setting) : { } {  	<LBRACKET>  	scalarValueList(setting)  	<RBRACKET>}private void listValue(Setting setting) : { } {	<LPAREN>	valueList(setting)	<RPAREN>}private void groupValue(Setting setting) : { } {	<LBRACE>	settingList(null/*setting.getConfiguration()*/)	<RBRACE>}