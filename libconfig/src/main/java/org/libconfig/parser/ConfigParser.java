/* Generated By:JavaCC: Do not edit this line. ConfigParser.java */
package org.libconfig.parser;

import java.io.*;

import java.util.List;
import java.util.ArrayList;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.libconfig.*;

public class ConfigParser implements ConfigParserConstants {

  final public Config buildConfiguration() throws ParseException {
        Config config = new Config();
    settingList(config);
    jj_consume_token(0);
          {if (true) return config;}
    throw new Error("Missing return statement in function");
  }

  final private void settingList(Config config) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME_TOKEN:
      setting(config);

      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME_TOKEN:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        setting(config);

      }
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  final private void setting(Config config) throws ParseException {
    jj_consume_token(NAME_TOKEN);

    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      break;
    case EQUALS:
      jj_consume_token(EQUALS);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[3] = jj_gen;

    }

  }

  final private void valueList(Setting setting) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_TOKEN:
    case INTEGER_TOKEN:
    case HEX_INTEGER:
    case FLOATING_POINT_TOKEN:
    case STRING_TOKEN:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
      value(setting);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        value(setting);
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  final private void value(Setting setting) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_TOKEN:
    case INTEGER_TOKEN:
    case HEX_INTEGER:
    case FLOATING_POINT_TOKEN:
    case STRING_TOKEN:
      scalarValue(setting);
      break;
    case LBRACKET:
      arrayValue(setting);
      break;
    case LPAREN:
      listValue(setting);
      break;
    case LBRACE:
      groupValue(setting);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private void scalarValueList(Setting setting) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_TOKEN:
    case INTEGER_TOKEN:
    case HEX_INTEGER:
    case FLOATING_POINT_TOKEN:
    case STRING_TOKEN:
      scalarValue(setting);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        scalarValue(setting);
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  final private void scalarValue(Setting setting) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_TOKEN:
      jj_consume_token(BOOLEAN_TOKEN);

      break;
    case INTEGER_TOKEN:
      jj_consume_token(INTEGER_TOKEN);

      break;
    case HEX_INTEGER:
      jj_consume_token(HEX_INTEGER);

      break;
    case FLOATING_POINT_TOKEN:
      jj_consume_token(FLOATING_POINT_TOKEN);

      break;
    case STRING_TOKEN:
      jj_consume_token(STRING_TOKEN);

      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private void arrayValue(Setting setting) throws ParseException {
    jj_consume_token(LBRACKET);
    scalarValueList(setting);
    jj_consume_token(RBRACKET);
  }

  final private void listValue(Setting setting) throws ParseException {
    jj_consume_token(LPAREN);
    valueList(setting);
    jj_consume_token(RPAREN);
  }

  final private void groupValue(Setting setting) throws ParseException {
    jj_consume_token(LBRACE);
    settingList(null/*setting.getConfiguration()*/);
    jj_consume_token(RBRACE);
  }

  /** Generated Token Manager. */
  public ConfigParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800000,0x800000,0x0,0x0,0x0,0x544a9000,0x544a9000,0x0,0x4a9000,0x4a9000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0xa,0x5,0x4,0x0,0x0,0x4,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public ConfigParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ConfigParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ConfigParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ConfigParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ConfigParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ConfigParser(ConfigParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ConfigParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[36];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
